knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_knit$set(root.dir="C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic_assembly process/Rmarkdown outputs")
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
library(ggdendro)
library(viridis)
library(rgplates)
library(sp)
library(stats)
library(geosphere)
library(iNEXT)
library(ade4)
library(adespatial)
library(labdsv)
library(ape)
library(vegan)
library(emstreeR)
library(igraph)
library("metagMisc")
# devtools::install_github("Corentin-Gibert-Paleontology/DNCImper")
library(DNCImper)
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/DataBase conodonts")
Occ.NT.2022 <- read.csv2("Occurence_Permian Triassic conodont_2022.csv",header = T, sep = ";",stringsAsFactors = TRUE)
str(Occ.NT.2022)
ref <- Occ.NT.2022 %>% select(Ref_section, Age_paper) %>% unique()
ref <- Occ.NT.2022 %>% select(Ref_section, Age_paper) %>% unique() %>% group_by(Age_paper) %>% summarise()
View(ref)
?summarise
ref <- Occ.NT.2022 %>% select(Ref_section, Age_paper) %>% unique() %>% group_by(Age_paper) %>% summarise(n=n())
View(ref)
hist(ref)
?hist
hist(ref$n)
plot(ref)
ref <- Occ.NT.2022 %>% select(Ref_section, Age_paper) %>% unique() #%>% group_by(Age_paper) %>% summarise(n=n())
hist(ref$Age_paper)
hist(Occ.NT.2022$Age_paper)
par(mfrow=c(1,2))
hist(ref$Age_paper, main="frequency of references based on the year of publication")
hist(Occ.NT.2022$Age_paper, main="frequency of occurrences based on the year of publication")
par(mfrow=c(2,1))
hist(ref$Age_paper, main="frequency of references based on the year of publication")
hist(Occ.NT.2022$Age_paper, main="frequency of occurrences based on the year of publication")
par(mfrow=c(1,2))
hist(ref$Age_paper, main="frequency of references based on the year of publication")
hist(Occ.NT.2022$Age_paper, main="frequency of occurrences based on the year of publication")
par(mfrow=c(1,2))
hist(ref$Age_paper, main="References date")
hist(Occ.NT.2022$Age_paper, main="Occurrences date")
par(mfrow=c(1,2))
hist(ref$Age_paper, main="References date", xlab="Age")
hist(Occ.NT.2022$Age_paper, main="Occurrences date", xlab="Age")
par(mfrow=c(1,2))
hist(ref$Age_paper, main="References date", xlab="Year")
hist(Occ.NT.2022$Age_paper, main="Occurrences date", xlab="Year")
Occ.NT.2022.clean <- Occ.NT.2022 %>%
dplyr::filter(!Status_species %in% c("?","?_aff","?_indet",
"aff","cf","cf_indet",
"ex_gr","ex_gr_morph1","ex_gr_morph2",
"gr","indet","quoted","s_l",
"dubious"),
!Gn_Species_current%in%c(
"Cl_bogschi","Cl_chengyuanensis","Cl_microscupidata","Cl_postbitteri","Cl_shengi","Cl_xiangxianensis","Cl_zaki",
"Co_oezdemirae","E_bogschi","E_delicatula","E_gradata","E_nevadensis","E_praenevadensis","E_torta","E_transita","E_triassica", "Gg_tethydis","Hi_lobata",
"Me_longidentata","Ng_mombergensis","Ns_dronovi","Ns_excelsus","Pc_multispinosa","Pc_tridentata",
"Pr_geiseri","Pr_inclinatus","Pr_tricuspidatus","St_dobruskinae",
"Bo_spC_Orchard2007","Bo_spD_Leu2021","Bo_spE_Leu2021","Bo_spA_Leu2021","Bo_spB_Leu2021","Bo_spC_Leu2021","Bo_spA_Golding2021",
"Ch_spA_Ha2021","Ch_spB_Ha2021","Cl_spB_Kozur2005","Cl_spC_Kozur2005","Cl_spB_Gliwa2020","Cl_spC_Gliwa2020",
"Cl_spA_Hatleberg_and_Clark1984","Cl_spA_Sun2021","Cl_spB_Hatleberg_and_Clark1984","Cb_spA_Golding2021","Cb_spA_Leu2021",
"Cs_n_spA_Orchard_and_Zonneveld_2009","Cs_sp_Orchard_and_Zonneveld_2009","Cs_spA_Orchard2009","Cr_kochi_spp",
"D_spA_Sun2021","D_spB_Leu2021","D_spC_Leu2021","D_spD_Leu2021","Gg_spA_Leu2021","Gu_spA_Leu2021","Gu_spA_Orchard_and_Zonneveld_2009",
"Hi_spA_Gliwa2020","Ic_spA_Leu2021","Ic_spB_Leu2021","Mag_spA_Golding2021","Mag_spA_Leu2021","Mag_spB_Leu2021","Mag_spD_Orchard2021",
"Ng_spA_Golding2021","Ng_spA_Leu2021","Ng_spA_Liu2020","Ng_spB_Leu2021","Ng_spB_Liu2020","Ng_spB_Orchard2008","Ng_spC_Leu2021","Ng_spC_Orchard2007","Ng_spC_Orchard2008",
"Ng_spC_Orchard2021","Ng_spD_Orchard2007","Ng_spE_Orchard2007","Ng_spH_Golding2014","Ng_spH_Orchard2021",
"Ns_n_spQ_Orchard_and_Zonneveld_2009","Ns_spA_Leu2021","Ns_spB_Hatleberg_and_Clark1984","Ns_spC_Hatleberg_and_Clark1984",
"Ns_spD_Hatleberg_and_Clark1984","Ns_spR_Orchard2007","Ns_spS_Orchard2007","Ns_spV_Orchard2007","Nst_spA_Leu2021",
"Nv_spA_Leu2021","Nv_spB_Leu2021","Nv_sp_indetB_Leu2021","Nv_spD_Leu2021","Pr_sp1_Leu2021","Pr_sp2_Leu2021",
"Sg_spA_Golding2021","Sg_spA_Orchard2007","Sg_spA_Orchard_Nakrem2008","Sg_spA_Sun2021","Sg_spF_Orchard2007","Sp_spA_Leu2021","Sp_spB_Leu2021","Sp_spC_Leu2021",
"Ur_spA_Leu2021","V_spA_Wardlaw_and_Pogue1995","Wa_spA_Orchard2009",
"Ad_sp","Bo_sp","Cb_sp","Cl_sp","Cl_spp",
"Co_sp","Cr_sp","Cr_spp","Cs_spp","D_sp",
"E_sp","Eu_sp","Fu_sp","Gg_sp","Gu_sp",
"Ha_sp","Hi_sp","Hi_spp","Ic_sp","Ic_spp",
"Is_sp","Ir_sp","Mag_spp","Mag_sp","Me_sp",
"Mg_sp","Ng_sp","Ns_sp","Ns_spp","Nst_sp",
"Nst_spp","Nv_sp","Nv_spp","Pc_sp","Pc_spp",
"Pr_sp","Sp_sp","Sp_spp","Sg_sp","Sg_spp",
"St_sp","Sw_sp","Ts_sp","Ts_spp","V_sp"))%>%droplevels()
##Get paleocoordinates
data.coord <- Occ.NT.2022.clean %>%
dplyr::select(Section,Longitude,Latitude)%>%
droplevels()%>%unique()%>%
tibble::remove_rownames()%>%tibble::column_to_rownames(var="Section")
data.paleocoord.off.PALEOMAP <- rgplates::reconstruct(data.coord, age=250, model="PALEOMAP", plateperiod=FALSE)
#Plot paleocoordinates
mapOff250 <- rgplates::reconstruct("coastlines", age=250, model="PALEOMAP")
par(mai=c(0,0,0,0))
svg(filename="paleomap_sections_raw.svg", width = 8)
plot(mapOff250$geometry, border=NA, col="gray")
points(data.paleocoord.off.PALEOMAP, cex=0.75, pch=16, col="darkgoldenrod")
dev.off()
Paleocoord <- as.data.frame(data.paleocoord.off.PALEOMAP) %>%
tibble::rownames_to_column(var="Section")
colnames(Paleocoord) <- c("Section","OffPaleolong","OffPaleolat")
japan <- Occ.NT.2022.clean %>%
filter(Province_State_country=="Japan") %>%
select(Section) %>%
unique() %>% droplevels()
Paleocoord$OffPaleolong[which(Paleocoord$Section %in% japan$Section)] <- 145
Paleocoord$OffPaleolat[which(Paleocoord$Section %in% japan$Section)] <- 0
Paleocoord$OffPaleolong[which(Paleocoord$Section %in% c("Ajvadzikdere","Tranak"))] <- 40
Paleocoord$OffPaleolat[which(Paleocoord$Section %in% c("Ajvadzikdere","Tranak"))] <- 15
data.paleocoord.off.PALEOMAP.acc <- as.matrix(Paleocoord[,2:3])
svg(filename="paleomap_sections_clean.svg", width = 8)
plot(mapOff250$geometry, border=NA, col="gray")
points(data.paleocoord.off.PALEOMAP.acc, cex=0.75, pch=16, col="darkgoldenrod")
dev.off()
Occ.NT.2022.clean.paleocoord <- dplyr::full_join(Paleocoord, Occ.NT.2022.clean)
Occ.NT.2022.clean.paleocoord%>%select(Stage,Sub_stage)%>%unique()%>%droplevels()%>%arrange(Stage)
Occ.NT.2022.clean.paleocoord.acc <- Occ.NT.2022.clean.paleocoord%>%
filter(Stage %in% c("Changhsingian","Induan","Olenekian"),
!Sub_stage %in% c("Griesbachian?","Dienerian?", "Dienerian/Smithian","Smithian?","Smithian/Spathian","?"))
Occ.NT.2022.clean.paleocoord.acc%>%select(Stage,Sub_stage)%>%unique()%>%droplevels()%>%arrange(Stage)
getwd
getwd()
BasinUPGMA <- Occ.NT.2022.clean.paleocoord.acc%>%
select(Province_State_country,Section,OffPaleolong,OffPaleolat)%>%
unique()%>%unite(Location,c(Province_State_country,Section),remove=FALSE)
# write.csv2(BasinUPGMA, "BasinUPGMA_2023-09.csv",row.names = FALSE)
BasinUPGMA.dist <- sp::spDists(as.matrix(BasinUPGMA[,c(4,5)]), longlat=TRUE)
UPGMA <- stats::hclust(stats::as.dist(BasinUPGMA.dist), method = "average", members = NULL)
par(mai=c(0,1,0.5,0))
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Data_SuppInf")
Regions <- read.csv2("Table S2_Section_paleocoord_regions_2023-09.csv", sep=";", dec=",", header=TRUE, stringsAsFactors = TRUE)
#Integrate regions to the DB
Regions2 <- Regions%>%select(Section,Region)
Occ.NT.2022.clean.regions <- dplyr::full_join(Regions2, Occ.NT.2022.clean.paleocoord.acc)%>%droplevels()
rm(Regions2)
#Map the sections, colored according to their region
Section.coord <- Regions%>%select(Section,OffPaleolong,OffPaleolat)%>%tibble::column_to_rownames("Section")
mapOff250 <- rgplates::reconstruct("coastlines", age=250, model="PALEOMAP")
par(mfrow=c(1,1),
mai=c(0,0,0,0))
plot(mapOff250$geometry, border=NA, col="gray95")
points(Section.coord, pch=c(1:25,1:2)[Regions$Region],
col=c(1:27)[Regions$Region],cex=2)
#Calculate mean point for each region
Regions.unique <- Regions %>%
select(Section,Region) %>% unique() %>%
group_by(Region) %>% summarise(Nombre =n()) %>%
filter(Nombre==1) %>% droplevels() %>%
dplyr::pull(Region)
Regions.coord.unique <- Regions%>%
select(OffPaleolong, OffPaleolat, Region)%>%
unique()%>%
filter(Region %in% Regions.unique)%>%
tibble::column_to_rownames(var="Region")%>%
droplevels()
Regions.coord <- Regions%>%
select(OffPaleolong, OffPaleolat, Region, Section)%>%
unique()%>%
filter(!Region %in% Regions.unique)%>%
droplevels()
Regions.coord.list <- split(Regions.coord, Regions.coord$Region, drop=TRUE)
Regions.coord.mean.list <-
lapply(Regions.coord.list, function(data){
m <- data %>% select(-Region, -Section)%>% droplevels()
n <- geosphere::geomean(m)
}
)
Regions.coord.mean <- as.data.frame(do.call(rbind, Regions.coord.mean.list),
row.names = names(Regions.coord.mean.list))
colnames(Regions.coord.mean) <- c("OffPaleolong", "OffPaleolat")
Regions.unique
coord.mean.cent <- rbind(Regions.coord.mean,Regions.coord.unique)
coord.mean.cent$OffPaleolong[which(coord.mean.cent$OffPaleolong<25)] <- coord.mean.cent$OffPaleolong[which(coord.mean.cent$OffPaleolong<25)] + 360
coord.mean.cent.ord <- coord.mean.cent[order(coord.mean.cent$OffPaleolong),]
#Graphical functions
SAC.graph <- #plot species accumulation curve
function(data, xmax, xseq, ymax, yseq){
g <- iNEXT::ggiNEXT(data,facet.var="Assemblage")+
theme_bw()+
scale_color_manual(values = viridis(1))+
scale_fill_manual(values = viridis(1))+
scale_x_continuous(breaks=seq(0,xmax,xseq))+
scale_y_continuous(breaks=seq(0,ymax,yseq),limits=c(0,ymax), expand=c(0,0))+
theme(legend.position="bottom",
text=element_text(size=8),
legend.title=element_text(size=8),
legend.text=element_text(size=8),
axis.title=element_text(size=8),
axis.text=element_text(size=8))
labs(y = "Species richness", x = "Number of sections")
#svg(filename = "SAC_Regions.svg", width = 18, height = 3.5)
g
#dev.off()
}
SC.graph <- #plot sampling coverage
function(data, xmax, xseq){
# data.i <- lapply(data$iNextEst$size_based, function(data){data %>% filter(method=="observed")})
# data.df <- do.call(rbind.data.frame, data.i)
data.df <- data$iNextEst$size_based %>% filter(Method=="Observed")
g <- ggplot2::qplot(data=data.df, x=t, y=SC, label=Assemblage)+
geom_point()+
geom_errorbar(aes(ymin=SC.LCL, ymax=SC.UCL),linewidth=0.5)+
geom_text_repel(aes(label=data.df$Assemblage),size=3)+
scale_y_continuous(breaks=seq(0,1,0.1), limits=c(0,1.01), expand=c(0,0))+
scale_x_continuous(breaks=seq(0,xmax,xseq), limits=c(0,xmax), expand=c(0,0))+
theme_bw()+
theme(text=element_text(size=8),
legend.title=element_text(size=8),
legend.text=element_text(size=8),
axis.title=element_text(size=8),
axis.text=element_text(size=8))+
labs(x="Number of sections", y="Sampling coverage")
g
}
Regions.un2 <- Regions %>% #Remove regions with one or two regions
select(Section,Region) %>% unique() %>%
group_by(Region) %>% summarise(Nombre =n()) %>%
filter(Nombre%in%c(1,2)) %>% droplevels() %>%
dplyr::pull(Region)
data.SAC <- Occ.NT.2022.clean.regions %>% select(Gn_Species_current,Section,Region) %>%
filter(!Region %in% Regions.un2) %>%
droplevels() %>% unique()
list.data.SAC <- split(data.SAC, data.SAC$Region, drop=TRUE)
list.data.SAC <- lapply(list.data.SAC, function(data){data %>% select(-Region) %>% droplevels()})
list.data.SAC <- lapply(list.data.SAC, function(data){as.data.frame.matrix(table(data$Gn_Species_current, data$Section))})
num.row <- unlist(lapply(list.data.SAC, nrow))
num.row.1 <- which(num.row>1)
list.data.SAC <- list.data.SAC[c(num.row.1)]#Remove regions with only one species occurrence
i1 <- iNEXT::iNEXT(list.data.SAC, datatype = "incidence_raw", endpoint=500)
SAC.analysis <- SAC.graph(i1, xmax=500, xseq=200, ymax=200, yseq=25)
SC.analysis <- SC.graph(i1, xmax=70, xseq=5)
ggarrange(SAC.analysis, SC.analysis, col=1, row=2)
Regions
View(Regions)
Regions %>% filter(Region=="Thailand")
Regions %>% filter(Province_State_country=="Thailand")
Regions.unique
Occ.NT.2022 %>% filter(Region_county=="British_Columbia", Stage=="Dienerian")
Occ.NT.2022 %>% filter(Region_county=="British_Columbia", Sub_Stage=="Dienerian")
Occ.NT.2022 %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Occ.NT.2022 %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Occ.NT.2022.clean %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Occ.NT.2022.clean %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Regions %>% filter(Region=="British Columbia")
levels(Regions$Region)
Regions %>% filter(Region=="Bri")
Occ.NT.2022.clean.paleocoord.acc
View(Occ.NT.2022.clean.paleocoord.acc)
View(Occ.NT.2022.clean.paleocoord)
View(Occ.NT.2022.clean)
View(Paleocoord)
Occ.NT.2022.clean.paleocoord <- dplyr::full_join(Paleocoord, Occ.NT.2022.clean)
Occ.NT.2022.clean.paleocoord %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Occ.NT.2022.clean.paleocoord %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Occ.NT.2022.clean.paleocoord.acc %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
BasinUPGMA
BasinUPGMA %>% filter(Province_State_country=="Canada")
Occ.NT.2022.clean.regions %>% filter(Region_county=="British_Columbia", Sub_stage=="Dienerian")
Regions.un2
View(data.SAC)
View(list.data.SAC)
