.f = ~ map_depth(.x, .depth = pluck_depth(.x) - 2,  split, .y),
.init = data.SAC.time)
list.data.SAC.time.full <- #remove absent region from each time interval
lapply(list.data.SAC.time, function(data){
purrr::discard(data, function(x) is_empty(x$Section))
})
list.data.SAC.time.full <- #remove useless factors
lapply(list.data.SAC.time.full, function(data){
purrr::map(data,~{.x %>%
select(-Region, -Sub_stage) %>%
droplevels()})})
list.data.SAC.time.up2 <- #keep only regions with more than 2 sections
lapply(list.data.SAC.time.full, function(data){
l <- list()
for (i in 1:length(data)) {
if (nlevels(as.factor(data[[i]]$Section))>2)
l <- c(l, data[i])
}
data <- l
})
list.data.SAC.time.up2.occ <- #Occurrence matrix
lapply(list.data.SAC.time.up2, function(data){
purrr::map(data, function(x){as.data.frame.matrix(table(x$Gn_Species_current, x$Section))})
})
list.data.SAC.time.up2.occ2 <- #Remove regions with only one species
lapply(list.data.SAC.time.up2.occ, function(data){
num.row <- unlist(lapply(data, nrow))
num.row.up1 <- which(num.row>1)
data <- data[c(num.row.up1)]
})
list.data.SAC.time.up2.occ2 <- list( #Arrange the dataset
Changhsingian = list.data.SAC.time.up2.occ2$Changhsingian,
Griesbachian = list.data.SAC.time.up2.occ2$Griesbachian,
Dienerian = list.data.SAC.time.up2.occ2$Dienerian,
Smithian = list.data.SAC.time.up2.occ2$Smithian,
Spathian = list.data.SAC.time.up2.occ2$Spathian
)
#Function for dividing datasets depending on singletons
Remove_single <- function(data){
data <- data %>% mutate(Somme = rowSums(data), RowNames = rownames(data)) %>% filter(Somme != 1)
rownames(data) <- data$RowNames
data <- data %>% select(-Somme, -RowNames)
}
#Without regions < 2 sections
list.occ.up2 <- split(data.SAC.time, data.SAC.time$Sub_stage)
list.occ.up2 <- lapply(list.occ.up2, droplevels)
list.occ.up2$Changhsingian <- list.occ.up2$Changhsingian %>%
filter(Region %in% c(names(list.data.SAC.time.up2$Changhsingian))) %>%
droplevels()
list.occ.up2$Griesbachian <- list.occ.up2$Griesbachian %>%
filter(Region %in% c(names(list.data.SAC.time.up2$Griesbachian))) %>%
droplevels()
list.occ.up2$Dienerian <- list.occ.up2$Dienerian %>%
filter(Region %in% c(names(list.data.SAC.time.up2$Dienerian))) %>%
droplevels()
list.occ.up2$Smithian <- list.occ.up2$Smithian %>%
filter(Region %in% c(names(list.data.SAC.time.up2$Smithian))) %>%
droplevels()
list.occ.up2$Spathian <- list.occ.up2$Spathian %>%
filter(Region %in% c(names(list.data.SAC.time.up2$Spathian))) %>%
droplevels()
list.occ.up2 <- #remove useless factors
lapply(list.occ.up2, function(data){
data %>% select(-Section, -Sub_stage) %>%
unique() %>% droplevels()
})
list.contingence.up2 <- lapply(list.occ.up2, function(data){
as.data.frame.matrix(table(data$Gn_Species_current, data$Region))
})
list.contingence.up2 <- list.contingence.up2[c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian")]
list.contingence.up2.single <- list.contingence.up2
list.contingence.up2.Nosingle <- lapply(list.contingence.up2, Remove_single)
list.contingence.up2.Nosingle <- lapply(list.contingence.up2.Nosingle, droplevels)
write.csv2(list.contingence.up2.Nosingle$Changhsingian, file="Incidence matrix_no singleton_conodont_Changhsingian.csv")
write.csv2(list.contingence.up2.Nosingle$Griesbachian, file="Incidence matrix_no singleton_conodont_Griesbachian.csv")
write.csv2(list.contingence.up2.Nosingle$Dienerian, file="Incidence matrix_no singleton_conodont_Dienerian.csv")
write.csv2(list.contingence.up2.Nosingle$Smithian, file="Incidence matrix_no singleton_conodont_Smithian.csv")
write.csv2(list.contingence.up2.Nosingle$Spathian, file="Incidence matrix_no singleton_conodont_Spathian.csv")
list.ORP.up2 <-list(
Changhsingian = list(Changhsingian = as.data.frame(t(list.contingence.up2.single$Changhsingian)),
name = "Changhsingian"),
Griesbachian = list(Griesbachian = as.data.frame(t(list.contingence.up2.single$Griesbachian)),
name = "Griesbachian"),
Dienerian = list(Dienerian = as.data.frame(t(list.contingence.up2.single$Dienerian)),
name = "Dienerian"),
Smithian = list(Smithian = as.data.frame(t(list.contingence.up2.single$Smithian)),
name = "Smithian"),
Spathian = list(Spathian = as.data.frame(t(list.contingence.up2.single$Spathian)),
name = "Spathian")
)
ORP <- function(data, Nite, right){
#Empiric ORP
n.sp <- as.numeric(ncol(data[[1]]))
#n.region <- as.numeric(nrow(data[[1]]))
perc <- apply(data[[1]], 2, function(x)sum(x)/length(x)*100)
hist.perc <- hist(perc, breaks=seq(0,100,10), right=right, plot=FALSE)
df.perc <- data.frame("hist.perc.counts"=as.numeric(hist.perc$counts),
"hist.perc.perc"=apply(as.data.frame(hist.perc$counts), 1,
function(x)x/n.sp*100),
row.names = hist.perc$mids/100)
#A function for CI and null model
l.boot <- lapply(vector("list",Nite), function(x){sample(data[[1]], replace = TRUE)})
l.lot <- lapply(vector("list",Nite), function(x){apply(data[[1]],1,function(x)sample(x))})
df.boot <- #Boostrap
lapply(l.boot, function(data){
perc.boot <- as.numeric(apply(data, 2, function(x)sum(x)/length(x)*100))
hist.perc.boot <- hist(perc.boot, breaks=seq(0,100,10), right=right, plot=FALSE)
hist.perc.boot.count <- hist.perc.boot$counts
hist.perc.boot.perc <- apply(as.data.frame(hist.perc.boot$count), 1,
function(x)x/n.sp*100)
list(hist.perc.boot.count, hist.perc.boot.perc)
}
)
df.boot.count <-
as.data.frame(lapply(df.boot, function(data){data[[1]]}),
col.names = 1:length(l.boot),
row.names = seq(0.05,0.95,0.10)
)
df.boot.perc <-
as.data.frame(lapply(df.boot, function(data){data[[2]]}),
col.names = 1:length(l.boot),
row.names = seq(0.05,0.95,0.10)
)
df.lot <- #Lottery
lapply(l.lot, function(data){
perc.lot <- as.numeric(apply(t(data), 2, function(x)sum(x)/nrow(t(data))*100))
hist.lot <- hist(perc.lot, breaks=seq(0,100,10), right=right, plot=FALSE)
hist.lot.count <- hist.lot$counts
hist.lot.perc <- apply(as.data.frame(hist.lot$counts), 1,
function(x)x/n.sp*100)
list(hist.lot.count, hist.lot.perc)
}
)
df.lot.count <-
as.data.frame(lapply(df.lot, function(data){data[[1]]}),
col.names = 1:length(l.boot),
row.names = hist.perc$mids/100
)
df.lot.perc <-
as.data.frame(lapply(df.lot, function(data){data[[2]]}),
col.names = 1:length(l.boot),
row.names = hist.perc$mids/100
)
#LowerBound and UpperBound
CI.count.min <- as.numeric(apply(df.boot.count,1,function(x)sort(as.numeric(x))[0.025*Nite]))
CI.count.max <- as.numeric(apply(df.boot.count,1,function(x)sort(as.numeric(x))[0.975*Nite]))
CI.perc.min <- as.numeric(apply(df.boot.perc,1,function(x)sort(as.numeric(x))[0.025*Nite]))
CI.perc.max <- as.numeric(apply(df.boot.perc,1,function(x)sort(as.numeric(x))[0.975*Nite]))
lot.count.min <- as.numeric(apply(df.lot.count,1,function(x)sort(as.numeric(x))[0.025*Nite]))
lot.count.max <- as.numeric(apply(df.lot.count,1,function(x)sort(as.numeric(x))[0.975*Nite]))
lot.perc.min <- as.numeric(apply(df.lot.perc,1,function(x)sort(as.numeric(x))[0.025*Nite]))
lot.perc.max <- as.numeric(apply(df.lot.perc,1,function(x)sort(as.numeric(x))[0.975*Nite]))
#Gather all results
df.ORP <- cbind (df.perc,
CI.count.min, CI.count.max, CI.perc.min, CI.perc.max,
lot.count.min, lot.count.max, lot.perc.min, lot.perc.max)
#print(df.ORP)
#Graphic representation
#Taxa count
plot.count <-
ggplot(df.ORP, aes(x=as.numeric(rownames(df.ORP)), y=hist.perc.counts))+
geom_ribbon(aes(ymin=lot.count.min, ymax=lot.count.max),fill="grey90")+
geom_errorbar(aes(ymin=CI.count.min, ymax=CI.count.max), width=0) +
geom_point(size=1)+
theme_bw()+
theme(text=element_text(size=8),
legend.title=element_text(size=8),
legend.text=element_text(size=8),
axis.title=element_text(size=8),
axis.text=element_text(size=8),
plot.title = element_text(size=10),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())+
scale_y_continuous(breaks=seq(0,60,10),limits=c(0,60))+
scale_x_continuous(breaks=seq(0,1,0.1),limits=c(0,1))+
labs(x="Occurence ratio", y="Number of taxa", title=data[[2]])
#Taxa perc
plot.perc <-
ggplot(df.ORP, aes(x=as.numeric(rownames(df.ORP)), y=hist.perc.perc))+
geom_ribbon(aes(ymin=lot.perc.min, ymax=lot.perc.max),fill="grey90")+
geom_errorbar(aes(ymin=CI.perc.min, ymax=CI.perc.max), width=0) +
geom_point(size=1)+
theme_bw()+
theme(text=element_text(size=8),
legend.title=element_text(size=8),
legend.text=element_text(size=8),
axis.title=element_text(size=8),
axis.text=element_text(size=8),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank())+
scale_y_continuous(breaks=seq(0,80,10),limits=c(0,80))+
scale_x_continuous(breaks=seq(0,1,0.1),limits=c(0,1))+
labs(x="Occurence ratio", y="Percentage of taxa", title="")
ggarrange(plot.count, plot.perc)
}
multi.ORP <- lapply(list.ORP.up2, ORP, Nite=9999, right=TRUE)
plot.ORP <- ggarrange(plotlist=multi.ORP,ncol=1,nrow=5)
plot.ORP
ggsave(file="ORP_conodont.svg", plot=plot.ORP,
width = 160, height = 247 , units="mm")
list.contingence.up2.Nosingle
View(list.contingence.up2.Nosingle)
View(data.SAC.time)
View(list.occ.up2)
list.data.SAC.time.up2$Changhsingian
View(list.data.SAC.time.up2)
View(list.data.SAC.time.full)
View(list.data.SAC.time)
View(data.SAC.time)
length(unique(Occ.NT.2022.clean.paleocoord.acc$Section))
length(unique(Regions$Section))
View(Occ.NT.2022.clean.paleocoord.acc)
length(unique(Occ.NT.2022.clean.paleocoord$Section))
length(unique(Occ.NT.2022.clean$Section))
length(unique(Occ.NT.2022$Section))
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/DataBase conodonts")
Occ.NT.2022 <- read.csv2("Occurence_Permian Triassic conodont_2022.csv",header = T, sep = ";",stringsAsFactors = TRUE)
str(Occ.NT.2022)
Occ.NT.2022$Number_order
Occ.NT.2022$Number_order[1000:2000]
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/DataBase conodonts")
Occ.NT.2022 <- read.csv2("Occurence_Permian Triassic conodont_2022.csv",header = T, sep = ";",stringsAsFactors = TRUE)[,-c(27,28)]
str(Occ.NT.2022)
View(dataC.fossilbrush.clean.early)
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/DataBase conodonts")
Occ.NT.2022 <- read.csv2("Occurence_Permian Triassic conodont_2022.csv",header = T, sep = ";",stringsAsFactors = TRUE)[,-c(27,28,29)]
str(Occ.NT.2022)
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/DataBase conodonts")
Occ.NT.2022 <- read.csv2("Occurence_Permian Triassic conodont_2022.csv",header = T, sep = ";",stringsAsFactors = TRUE)
str(Occ.NT.2022)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
library(ggdendro)
library(viridis)
library(rgplates)
library(sp)
library(stats)
library(geosphere)
library(iNEXT)
library(ade4)
library(adespatial)
library(labdsv)
library(ape)
library(vegan)
library(emstreeR)
library(igraph)
library("metagMisc")
library(divDyn)
# devtools::install_github("Corentin-Gibert-Paleontology/DNCImper")
library(DNCImper)
setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/DataBase conodonts")
Occ.NT.2022 <- read.csv2("Occurence_Permian Triassic conodont_2022.csv",header = T, sep = ";",stringsAsFactors = TRUE)
str(Occ.NT.2022)
Occ.NT.2022.clean <- Occ.NT.2022 %>%
dplyr::filter(!Status_species %in% c("?","?_aff","?_indet",
"aff","cf","cf_indet",
"ex_gr","ex_gr_morph1","ex_gr_morph2",
"gr","indet","quoted","s_l",
"dubious"),
!Gn_Species_current%in%c(
"Cl_bogschi","Cl_chengyuanensis","Cl_microscupidata","Cl_postbitteri","Cl_shengi","Cl_xiangxianensis","Cl_zaki",
"Co_oezdemirae","E_bogschi","E_delicatula","E_gradata","E_nevadensis","E_praenevadensis","E_torta","E_transita","E_triassica", "Gg_tethydis","Hi_lobata",
"Me_longidentata","Ng_mombergensis","Ns_dronovi","Ns_excelsus","Pc_multispinosa","Pc_tridentata",
"Pr_geiseri","Pr_inclinatus","Pr_tricuspidatus","St_dobruskinae",
"Bo_spC_Orchard2007","Bo_spD_Leu2021","Bo_spE_Leu2021","Bo_spA_Leu2021","Bo_spB_Leu2021","Bo_spC_Leu2021","Bo_spA_Golding2021",
"Ch_spA_Ha2021","Ch_spB_Ha2021","Cl_spB_Kozur2005","Cl_spC_Kozur2005","Cl_spB_Gliwa2020","Cl_spC_Gliwa2020",
"Cl_spA_Hatleberg_and_Clark1984","Cl_spA_Sun2021","Cl_spB_Hatleberg_and_Clark1984","Cb_spA_Golding2021","Cb_spA_Leu2021",
"Cs_n_spA_Orchard_and_Zonneveld_2009","Cs_sp_Orchard_and_Zonneveld_2009","Cs_spA_Orchard2009","Cr_kochi_spp",
"D_spA_Sun2021","D_spB_Leu2021","D_spC_Leu2021","D_spD_Leu2021","Gg_spA_Leu2021","Gu_spA_Leu2021","Gu_spA_Orchard_and_Zonneveld_2009",
"Hi_spA_Gliwa2020","Ic_spA_Leu2021","Ic_spB_Leu2021","Mag_spA_Golding2021","Mag_spA_Leu2021","Mag_spB_Leu2021","Mag_spD_Orchard2021",
"Ng_spA_Golding2021","Ng_spA_Leu2021","Ng_spA_Liu2020","Ng_spB_Leu2021","Ng_spB_Liu2020","Ng_spB_Orchard2008","Ng_spC_Leu2021","Ng_spC_Orchard2007","Ng_spC_Orchard2008",
"Ng_spC_Orchard2021","Ng_spD_Orchard2007","Ng_spE_Orchard2007","Ng_spH_Golding2014","Ng_spH_Orchard2021",
"Ns_n_spQ_Orchard_and_Zonneveld_2009","Ns_spA_Leu2021","Ns_spB_Hatleberg_and_Clark1984","Ns_spC_Hatleberg_and_Clark1984",
"Ns_spD_Hatleberg_and_Clark1984","Ns_spR_Orchard2007","Ns_spS_Orchard2007","Ns_spV_Orchard2007","Nst_spA_Leu2021",
"Nv_spA_Leu2021","Nv_spB_Leu2021","Nv_sp_indetB_Leu2021","Nv_spD_Leu2021","Pr_sp1_Leu2021","Pr_sp2_Leu2021",
"Sg_spA_Golding2021","Sg_spA_Orchard2007","Sg_spA_Orchard_Nakrem2008","Sg_spA_Sun2021","Sg_spF_Orchard2007","Sp_spA_Leu2021","Sp_spB_Leu2021","Sp_spC_Leu2021",
"Ur_spA_Leu2021","V_spA_Wardlaw_and_Pogue1995","Wa_spA_Orchard2009",
"Ad_sp","Bo_sp","Cb_sp","Cl_sp","Cl_spp",
"Co_sp","Cr_sp","Cr_spp","Cs_spp","D_sp",
"E_sp","Eu_sp","Fu_sp","Gg_sp","Gu_sp",
"Ha_sp","Hi_sp","Hi_spp","Ic_sp","Ic_spp",
"Is_sp","Ir_sp","Mag_spp","Mag_sp","Me_sp",
"Mg_sp","Ng_sp","Ns_sp","Ns_spp","Nst_sp",
"Nst_spp","Nv_sp","Nv_spp","Pc_sp","Pc_spp",
"Pr_sp","Sp_sp","Sp_spp","Sg_sp","Sg_spp",
"St_sp","Sw_sp","Ts_sp","Ts_spp","V_sp"))%>%droplevels()
Occ.NT.2022.coord <- Occ.NT.2022 %>%
dplyr::select(Section,Longitude,Latitude)%>%
droplevels()%>%unique()%>%
tibble::remove_rownames()%>%tibble::column_to_rownames(var="Section")
##Current mapping
map_data <-
ggplot(map_data("world"), aes(x=long, y=lat, group=group)) +
geom_polygon(data=map_data("world"), colour = "grey", fill="grey")+
theme_classic()+
geom_point(data=Occ.NT.2022.coord,
aes(x=Longitude, y=Latitude, group=NULL), colour="darkgoldenrod")
# setwd("C:/Users/33677/Documents/NEW_WORK/THESE/PCI/Figures")
ggsave(filename="map_all_sections_conodont.svg", plot=map_data, device="svg",
units="in", width=8, height = 5)
##Get paleocoordinates
Occ.NT.2022.paleocoord.off.PALEOMAP <- rgplates::reconstruct(Occ.NT.2022.coord, age=250, model="PALEOMAP", plateperiod=FALSE)
#Plot paleocoordinates
mapOff250 <- rgplates::reconstruct("coastlines", age=250, model="PALEOMAP")
par(mai=c(0,0,0,0))
# setwd("C:/Users/33677/Documents/NEW_WORK/THESE/PCI/Figures")
svg(filename="paleomap_all_sections.svg", width = 8)
plot(mapOff250$geometry, border=NA, col="grey")
points(Occ.NT.2022.paleocoord.off.PALEOMAP, cex=0.75, pch=16, col="darkgoldenrod")
dev.off()
Occ.NT.2022.ref <- Occ.NT.2022 %>% select(Ref_section, Age_paper) %>% unique() %>% arrange(Age_paper)
# setwd("C:/Users/33677/Documents/NEW_WORK/THESE/PCI/Figures")
svg(filename="age_of.svg", width = 7, height = 4)
par(mfrow=c(1,2))
hist.ref.unique <- hist(Occ.NT.2022.ref$Age_paper,
#xlim=c(1965,2025), ylim=c(0,60), breaks=seq(1965,2025,5),
main="Age of publications", xlab="Year of publication", ylab="Number of publications")
hist.ref.occ <- hist(Occ.NT.2022$Age_paper,
#xlim=c(1965,2025), ylim=c(0,60), breaks=seq(1965,2025,5),
main="Age of occurrences", xlab=NULL, ylab=NULL)
dev.off()
sp.orig <- unique(Occ.NT.2022$Species_in_paper) %>% droplevels()
sp.curr.clean <- unique(Occ.NT.2022.clean$Gn_Species_current) %>% droplevels()
length(sp.orig)
length(sp.curr.clean)
length(intersect(sp.orig, sp.curr.clean))
data("stages")
Low.Trias <- read.csv2("Low_Trias.csv", h=T, dec=",")
stages <- rbind(stages, Low.Trias)
stages[which(stages$stage=="Changhsingian"), 'top'] <- 252.018
Occ.NT.2022.clean.SiB <- Occ.NT.2022.clean %>%
select(Species_in_paper, Gn_Species_current, Stage, Sub_stage) %>%
unique() %>% droplevels()
Occ.NT.2022.clean.SiB$Sub_stage <- as.character(Occ.NT.2022.clean.SiB$Sub_stage)
Occ.NT.2022.clean.SiB$Sub_stage[which(Occ.NT.2022.clean.SiB$Stage=="Changhsingian")] <- "Changhsingian"
Occ.NT.2022.clean.SiB$Sub_stage <- as.factor(Occ.NT.2022.clean.SiB$Sub_stage)
SiB.clean <- Occ.NT.2022.clean.SiB %>%
filter(Sub_stage %in% c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian")) %>%
droplevels()
SiB.clean$Sub_stage <- factor(SiB.clean$Sub_stage,
levels = c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
n.sp.orig <- SiB.clean %>%
select(!Gn_Species_current) %>% unique() %>%
group_by(Sub_stage) %>% summarise(ConoDB =n())
n.sp.curr <- SiB.clean %>%
select(!Species_in_paper) %>% unique() %>%
group_by(Sub_stage) %>% summarise(ConoDB =n())
library(paleobioDB)
dataC.paleobioDB <- paleobioDB::pbdb_occurrences(limit="all", base_name="Conodonta", interval=c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian"), show="classext")
dataC.paleobioDB.clean <- dataC.paleobioDB %>%
filter(oei %in% c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian") |
oli %in% c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian")) %>%
droplevels() %>%
select(tna,oei,oli) %>% droplevels() %>% unique()
dataC.paleobioDB.clean$oei <- factor(dataC.paleobioDB.clean$oei,
levels = c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
dataC.paleobioDB.clean$oli <- factor(dataC.paleobioDB.clean$oli,
levels = c("NA", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
n.sp.paleobioDB.early <- dataC.paleobioDB.clean %>% group_by(oei) %>% summarise(Nombre =n())
n.sp.paleobioDB.late <- dataC.paleobioDB.clean %>% group_by(oli) %>% summarise(Nombre =n())
n.sp.paleobioDB <- full_join(n.sp.paleobioDB.early,n.sp.paleobioDB.late, by = c("oei"="oli")) %>%
mutate(Nombre.y = replace_na(Nombre.y,0),
paleobioDB=Nombre.x+Nombre.y) %>% filter(!is.na(paleobioDB))
library(fossilbrush)
dataC.fossilbrush <- fossilbrush:::get_pbdb(taxon = "Conodonta", interval = c(255, 245), wait=499, tscale = "GTS_2020")
dataC.fossilbrush$early_interval <- as.factor(dataC.fossilbrush$early_interval)
dataC.fossilbrush$late_interval <- as.factor(dataC.fossilbrush$late_interval)
dataC.fossilbrush.clean <- dataC.fossilbrush %>%
filter(early_interval %in% c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian") |
late_interval %in% c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian"),
accepted_rank=="species") %>%
droplevels() %>%
select(accepted_name,early_interval,late_interval) %>% unique()
dataC.fossilbrush.clean$early_interval <- factor(dataC.fossilbrush.clean$early_interval,
levels = c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
dataC.fossilbrush.clean$late_interval <- factor(dataC.fossilbrush.clean$late_interval,
levels = c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
dataC.fossilbrush.clean.early <- dataC.fossilbrush.clean %>% group_by(early_interval) %>% summarise(Nombre =n())
dataC.fossilbrush.clean.late <- dataC.fossilbrush.clean %>% group_by(late_interval) %>% summarise(Nombre =n())
n.sp.fossilbrush <- full_join(dataC.fossilbrush.clean.early,dataC.fossilbrush.clean.late, by = c("early_interval"="late_interval")) %>%
mutate(fossilbrush=Nombre.x+Nombre.y)
library(paleoDiv)
dataC.paleoDiv <- paleoDiv::pdb(taxon="Conodonta", interval="all")
dataC.paleoDiv$early_interval <- as.factor(dataC.paleoDiv$early_interval)
dataC.paleoDiv$late_interval <- as.factor(dataC.paleoDiv$late_interval)
dataC.paleoDiv.clean <- dataC.paleoDiv %>%
filter(early_interval %in% c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian") |
late_interval %in% c("Changhsingian","Griesbachian","Dienerian","Smithian","Spathian"),
accepted_rank=="species") %>%
droplevels() %>%
select(accepted_name,early_interval,late_interval) %>% unique()
dataC.paleoDiv.clean$early_interval <- factor(dataC.paleoDiv.clean$early_interval,
levels = c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
dataC.paleoDiv.clean$late_interval <- factor(dataC.paleoDiv.clean$late_interval,
levels = c("Changhsingian", "Griesbachian", "Dienerian", "Smithian", "Spathian"))
dataC.paleoDiv.clean.early <- dataC.paleoDiv.clean %>% group_by(early_interval) %>% summarise(Nombre =n())
dataC.paleoDiv.clean.late <- dataC.paleoDiv.clean %>% group_by(late_interval) %>% summarise(Nombre =n())
n.sp.paleoDiv <- full_join(dataC.paleoDiv.clean.early, dataC.paleoDiv.clean.late, by = c("early_interval"="late_interval")) %>%
mutate(Nombre.y = replace_na(Nombre.y,0),
paleoDiv=Nombre.x+Nombre.y) %>% filter(!is.na(paleoDiv))
divDyn::tsplot(stages, boxes=c("short","system"), shading= "short", boxes.col=c("col","systemCol"),
xlim=which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian")),
ylab="Sample in bin diversity",
ylim=c(0,250),
labels.args=list(cex=0.6))
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.curr$ConoDB, col="black", pch=15)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.curr$ConoDB,  pch = 10, col = "black", lty = 1)
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.orig$ConoDB, col="grey70", pch=15)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.orig$ConoDB,  pch = 10, col = "grey70", lty = 1)
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.fossilbrush$fossilbrush, col="darkgoldenrod", pch=16)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.fossilbrush$fossilbrush,  pch = 10, col = "darkgoldenrod", lty = 1)
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.paleobioDB$paleobioDB, col="darkcyan", pch=17)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.paleobioDB$paleobioDB,  pch = 10, col = "darkcyan", lty = 1)
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.paleoDiv$paleoDiv, col="darkmagenta", pch=18)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.paleoDiv$paleoDiv,  pch = 10, col = "darkmagenta", lty = 1)
cols <- c("black", "grey70","darkgoldenrod","darkcyan","darkmagenta")
point <- c(15,15,16,17,18)
plotnames <-c("ConoDB current", "ConoDB original", "PBDB fossil brush", "PBDB paleobioDB", "PBDB paleoDiv")
legend("topleft", inset=c(0.01, 0.01),
legend= plotnames, pch = point, bg="white", col=cols, lwd=1, lty=1)
# setwd("C:/Users/33677/Documents/NEW_WORK/THESE/Permian-Triassic assembly-process/Datapaper_PCI Paleo")
svg(filename="Figure 1_Diversity curves.svg", width = 7, height = 4)
divDyn::tsplot(stages, boxes=c("short","system"), shading= "short", boxes.col=c("col","systemCol"),
xlim=which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian")),
ylab="Sample in bin diversity",
ylim=c(0,130),
labels.args=list(cex=0.6))
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.curr$ConoDB, col="black", pch=15)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.curr$ConoDB,  pch = 10, col = "black", lty = 1)
points(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.paleoDiv$paleoDiv, col="darkmagenta", pch=18)
lines(x=stages$mid[which(stages$stage %in% c("Changhsingian", "Griesbachian","Dienerian","Smithian","Spathian"))],
y=n.sp.paleoDiv$paleoDiv,  pch = 10, col = "darkmagenta", lty = 1)
cols <- c("black","darkmagenta")
point <- c(15,18)
plotnames <-c("Present database", "PaleoBiology DataBase")
legend("topleft", inset=c(0.02, 0.05),
legend= plotnames, pch = point, bg="white", col=cols, lwd=1, lty=1)
dev.off()
##Get paleocoordinates
data.coord <- Occ.NT.2022.clean %>%
dplyr::select(Section,Longitude,Latitude)%>%
droplevels()%>%unique()%>%
tibble::remove_rownames()%>%tibble::column_to_rownames(var="Section")
data.paleocoord.off.PALEOMAP <- rgplates::reconstruct(data.coord, age=250, model="PALEOMAP", plateperiod=FALSE)
#Plot paleocoordinates
mapOff250 <- rgplates::reconstruct("coastlines", age=250, model="PALEOMAP")
par(mai=c(0,0,0,0))
svg(filename="paleomap_sections_raw_conodont.svg", width = 8)
plot(mapOff250$geometry, border=NA, col="gray")
points(data.paleocoord.off.PALEOMAP, cex=0.75, pch=16, col="darkgoldenrod")
dev.off()
Paleocoord <- as.data.frame(data.paleocoord.off.PALEOMAP) %>%
tibble::rownames_to_column(var="Section")
colnames(Paleocoord) <- c("Section","OffPaleolong","OffPaleolat")
japan <- Occ.NT.2022.clean %>%
filter(Province_State_country=="Japan") %>%
select(Section) %>%
unique() %>% droplevels()
Paleocoord$OffPaleolong[which(Paleocoord$Section %in% japan$Section)] <- 145
Paleocoord$OffPaleolat[which(Paleocoord$Section %in% japan$Section)] <- 0
Paleocoord$OffPaleolong[which(Paleocoord$Section %in% c("Ajvadzikdere","Tranak"))] <- 40
Paleocoord$OffPaleolat[which(Paleocoord$Section %in% c("Ajvadzikdere","Tranak"))] <- 15
Paleocoord$OffPaleolong[which(Paleocoord$Section %in% c("Manatuto_loc5","Manatuto_loc6"))] <- 90
Paleocoord$OffPaleolat[which(Paleocoord$Section %in% c("Manatuto_loc5","Manatuto_loc6"))] <- -35
data.paleocoord.off.PALEOMAP.acc <- as.matrix(Paleocoord[,2:3])
svg(filename="paleomap_sections_clean_conodont.svg", width = 8)
plot(mapOff250$geometry, border=NA, col="gray")
points(data.paleocoord.off.PALEOMAP.acc, cex=0.75, pch=16, col="darkgoldenrod")
dev.off()
Occ.NT.2022.clean.paleocoord <- dplyr::full_join(Paleocoord, Occ.NT.2022.clean)
Occ.NT.2022.clean.paleocoord%>%select(Stage,Sub_stage)%>%unique()%>%droplevels()%>%arrange(Stage)
Occ.NT.2022.clean.paleocoord.acc <- Occ.NT.2022.clean.paleocoord%>%
filter(Stage %in% c("Changhsingian","Induan","Olenekian"),
!Sub_stage %in% c("Griesbachian?","Dienerian?", "Dienerian/Smithian","Smithian?","Smithian/Spathian","?"))
Occ.NT.2022.clean.paleocoord.acc%>%select(Stage,Sub_stage)%>%unique()%>%droplevels()%>%arrange(Stage)
#Keep only sections and paleocoord
BasinUPGMA <- Occ.NT.2022.clean.paleocoord.acc%>%
select(Province_State_country,Section,OffPaleolong,OffPaleolat)%>%
unique()%>%unite(Location,c(Province_State_country,Section),remove=FALSE)
write.csv2(BasinUPGMA, "Section_paleocoord_conodont.csv",row.names = FALSE)
BasinUPGMA.dist <- sp::spDists(as.matrix(BasinUPGMA[,c(4,5)]), longlat=TRUE)
UPGMA <- stats::hclust(stats::as.dist(BasinUPGMA.dist), method = "average", members = NULL)
par(mai=c(0,1,0.5,0))
svg(filename="UPGMA_tree_section_conodont.svg", height = 10, width=63)
plot(UPGMA, labels = BasinUPGMA$Location, hang = 0.1, check = TRUE, axes = TRUE, main = "",
frame.plot = FALSE, ann = TRUE, sub = NULL, xlab = NULL, ylab = "Height", cex=0.8)
dev.off()
getwd
getwd()
dev.off()
dev.off()
